// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("BattleMap")));
bytes32 constant BattleMapTableId = _tableId;

library BattleMap {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](10);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BOOL;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.BOOL;
    _schema[5] = SchemaType.BOOL;
    _schema[6] = SchemaType.BYTES32;
    _schema[7] = SchemaType.UINT256;
    _schema[8] = SchemaType.UINT32;
    _schema[9] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](10);
    _fieldNames[0] = "gamecreatedby";
    _fieldNames[1] = "gamestart";
    _fieldNames[2] = "width";
    _fieldNames[3] = "height";
    _fieldNames[4] = "gamepaused";
    _fieldNames[5] = "gameend";
    _fieldNames[6] = "winner";
    _fieldNames[7] = "stake";
    _fieldNames[8] = "playerlimit";
    _fieldNames[9] = "roomname";
    return ("BattleMap", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get gamecreatedby */
  function getGamecreatedby(bytes32 key) internal view returns (bytes32 gamecreatedby) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get gamecreatedby (using the specified store) */
  function getGamecreatedby(IStore _store, bytes32 key) internal view returns (bytes32 gamecreatedby) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set gamecreatedby */
  function setGamecreatedby(bytes32 key, bytes32 gamecreatedby) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((gamecreatedby)));
  }

  /** Set gamecreatedby (using the specified store) */
  function setGamecreatedby(IStore _store, bytes32 key, bytes32 gamecreatedby) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((gamecreatedby)));
  }

  /** Get gamestart */
  function getGamestart(bytes32 key) internal view returns (bool gamestart) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gamestart (using the specified store) */
  function getGamestart(IStore _store, bytes32 key) internal view returns (bool gamestart) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gamestart */
  function setGamestart(bytes32 key, bool gamestart) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((gamestart)));
  }

  /** Set gamestart (using the specified store) */
  function setGamestart(IStore _store, bytes32 key, bool gamestart) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((gamestart)));
  }

  /** Get width */
  function getWidth(bytes32 key) internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get width (using the specified store) */
  function getWidth(IStore _store, bytes32 key) internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set width */
  function setWidth(bytes32 key, uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((width)));
  }

  /** Set width (using the specified store) */
  function setWidth(IStore _store, bytes32 key, uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((width)));
  }

  /** Get height */
  function getHeight(bytes32 key) internal view returns (uint32 height) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get height (using the specified store) */
  function getHeight(IStore _store, bytes32 key) internal view returns (uint32 height) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set height */
  function setHeight(bytes32 key, uint32 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((height)));
  }

  /** Set height (using the specified store) */
  function setHeight(IStore _store, bytes32 key, uint32 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((height)));
  }

  /** Get gamepaused */
  function getGamepaused(bytes32 key) internal view returns (bool gamepaused) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gamepaused (using the specified store) */
  function getGamepaused(IStore _store, bytes32 key) internal view returns (bool gamepaused) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gamepaused */
  function setGamepaused(bytes32 key, bool gamepaused) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((gamepaused)));
  }

  /** Set gamepaused (using the specified store) */
  function setGamepaused(IStore _store, bytes32 key, bool gamepaused) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((gamepaused)));
  }

  /** Get gameend */
  function getGameend(bytes32 key) internal view returns (bool gameend) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gameend (using the specified store) */
  function getGameend(IStore _store, bytes32 key) internal view returns (bool gameend) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gameend */
  function setGameend(bytes32 key, bool gameend) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((gameend)));
  }

  /** Set gameend (using the specified store) */
  function setGameend(IStore _store, bytes32 key, bool gameend) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((gameend)));
  }

  /** Get winner */
  function getWinner(bytes32 key) internal view returns (bytes32 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get winner (using the specified store) */
  function getWinner(IStore _store, bytes32 key) internal view returns (bytes32 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set winner */
  function setWinner(bytes32 key, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((winner)));
  }

  /** Set winner (using the specified store) */
  function setWinner(IStore _store, bytes32 key, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((winner)));
  }

  /** Get stake */
  function getStake(bytes32 key) internal view returns (uint256 stake) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get stake (using the specified store) */
  function getStake(IStore _store, bytes32 key) internal view returns (uint256 stake) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set stake */
  function setStake(bytes32 key, uint256 stake) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((stake)));
  }

  /** Set stake (using the specified store) */
  function setStake(IStore _store, bytes32 key, uint256 stake) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((stake)));
  }

  /** Get playerlimit */
  function getPlayerlimit(bytes32 key) internal view returns (uint32 playerlimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get playerlimit (using the specified store) */
  function getPlayerlimit(IStore _store, bytes32 key) internal view returns (uint32 playerlimit) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set playerlimit */
  function setPlayerlimit(bytes32 key, uint32 playerlimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked((playerlimit)));
  }

  /** Set playerlimit (using the specified store) */
  function setPlayerlimit(IStore _store, bytes32 key, uint32 playerlimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked((playerlimit)));
  }

  /** Get roomname */
  function getRoomname(bytes32 key) internal view returns (string memory roomname) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9);
    return (string(_blob));
  }

  /** Get roomname (using the specified store) */
  function getRoomname(IStore _store, bytes32 key) internal view returns (string memory roomname) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9);
    return (string(_blob));
  }

  /** Set roomname */
  function setRoomname(bytes32 key, string memory roomname) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 9, bytes((roomname)));
  }

  /** Set roomname (using the specified store) */
  function setRoomname(IStore _store, bytes32 key, string memory roomname) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 9, bytes((roomname)));
  }

  /** Get the length of roomname */
  function lengthRoomname(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 9, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of roomname (using the specified store) */
  function lengthRoomname(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 9, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of roomname (unchecked, returns invalid data if index overflows) */
  function getItemRoomname(bytes32 key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 9, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of roomname (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemRoomname(IStore _store, bytes32 key, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 9, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to roomname */
  function pushRoomname(bytes32 key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToField(_tableId, _keyTuple, 9, bytes((_slice)));
  }

  /** Push a slice to roomname (using the specified store) */
  function pushRoomname(IStore _store, bytes32 key, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.pushToField(_tableId, _keyTuple, 9, bytes((_slice)));
  }

  /** Pop a slice from roomname */
  function popRoomname(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromField(_tableId, _keyTuple, 9, 1);
  }

  /** Pop a slice from roomname (using the specified store) */
  function popRoomname(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.popFromField(_tableId, _keyTuple, 9, 1);
  }

  /** Update a slice of roomname at `_index` */
  function updateRoomname(bytes32 key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)));
  }

  /** Update a slice of roomname (using the specified store) at `_index` */
  function updateRoomname(IStore _store, bytes32 key, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.updateInField(_tableId, _keyTuple, 9, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(
    bytes32 key
  )
    internal
    view
    returns (
      bytes32 gamecreatedby,
      bool gamestart,
      uint32 width,
      uint32 height,
      bool gamepaused,
      bool gameend,
      bytes32 winner,
      uint256 stake,
      uint32 playerlimit,
      string memory roomname
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 key
  )
    internal
    view
    returns (
      bytes32 gamecreatedby,
      bool gamestart,
      uint32 width,
      uint32 height,
      bool gamepaused,
      bool gameend,
      bytes32 winner,
      uint256 stake,
      uint32 playerlimit,
      string memory roomname
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    bytes32 gamecreatedby,
    bool gamestart,
    uint32 width,
    uint32 height,
    bool gamepaused,
    bool gameend,
    bytes32 winner,
    uint256 stake,
    uint32 playerlimit,
    string memory roomname
  ) internal {
    bytes memory _data = encode(
      gamecreatedby,
      gamestart,
      width,
      height,
      gamepaused,
      gameend,
      winner,
      stake,
      playerlimit,
      roomname
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    bytes32 gamecreatedby,
    bool gamestart,
    uint32 width,
    uint32 height,
    bool gamepaused,
    bool gameend,
    bytes32 winner,
    uint256 stake,
    uint32 playerlimit,
    string memory roomname
  ) internal {
    bytes memory _data = encode(
      gamecreatedby,
      gamestart,
      width,
      height,
      gamepaused,
      gameend,
      winner,
      stake,
      playerlimit,
      roomname
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(
    bytes memory _blob
  )
    internal
    view
    returns (
      bytes32 gamecreatedby,
      bool gamestart,
      uint32 width,
      uint32 height,
      bool gamepaused,
      bool gameend,
      bytes32 winner,
      uint256 stake,
      uint32 playerlimit,
      string memory roomname
    )
  {
    // 111 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 111));

    gamecreatedby = (Bytes.slice32(_blob, 0));

    gamestart = (_toBool(uint8(Bytes.slice1(_blob, 32))));

    width = (uint32(Bytes.slice4(_blob, 33)));

    height = (uint32(Bytes.slice4(_blob, 37)));

    gamepaused = (_toBool(uint8(Bytes.slice1(_blob, 41))));

    gameend = (_toBool(uint8(Bytes.slice1(_blob, 42))));

    winner = (Bytes.slice32(_blob, 43));

    stake = (uint256(Bytes.slice32(_blob, 75)));

    playerlimit = (uint32(Bytes.slice4(_blob, 107)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 111) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 143;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      roomname = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 gamecreatedby,
    bool gamestart,
    uint32 width,
    uint32 height,
    bool gamepaused,
    bool gameend,
    bytes32 winner,
    uint256 stake,
    uint32 playerlimit,
    string memory roomname
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(roomname).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        gamecreatedby,
        gamestart,
        width,
        height,
        gamepaused,
        gameend,
        winner,
        stake,
        playerlimit,
        _encodedLengths.unwrap(),
        bytes((roomname))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
